Hook : 
useState() : Acts as this.state in class based

Syntax : 
const [variableName, setMethod] = useState(<default-value>);
const [qty, setQty] = useState(0);
const [availableQty, setAvailableQty] = useState(5);
const [outOfStock, setOutOfStock] = useState(false);

setQty(5);



Phases in Lifecycle :
1. Mounting
2. Update
3. Unmounting


useEffect() : This hook covers all phaes of react lifecycle

useEffect(callBackFunction,dependency array);

useEffect(callbackFn,[]) => componentDidMount

useEffect(callbackFn) => componentDidUpdate

useEffect(() => {
    return () => {};
},[]) => componentWillUnmount

useEffect(callbackFn,[a,b]); => This will get called only when the value of a or b chnges


Input 
Controlled : Managed by React
Uncontrolled : Managed by DOM

Ref = Reference

Home
    Product Card
        Buttons
        Action Button
    Product Details
Product Listing Page


State Managent : Create a signle state for the whole application.
Context API

Working Principle of Redux : 
1. Updates can only be made using pure functions 
2. State is read only.
2. Aplication should have a single source of truth.

Redux :
1. Store  : Object which stores complete data of the application. (State of the application)
2. Action : These are plain objects which helps in updating the redux state
    2.1 type : Determines which type/key has to be updated in the state
    2.2 payload : Actual data for the key which has to be updated
    {type: "ADD_ITEM",payload:2}
    {type: "SUBTRACT_ITEM", payload:2}
3. Reducer: Pure function which has switch case in it (Business logic)

Pre requisits : 
    redux
    react-redux
    redux-toolkit
    
Header
Home
    Product Card

Product Cart => Redux Store => Header

Action Creator => Middleware (Convert any input to plain object) => Dispatches an action (plain object)


Axios Request => (Intercepted the request) - Add JWT to header => Network
Building Process:
1. Convert JSX into plain JS
2. Minification
3. Uglification


Deployment Cycle

Dev local system => Dev server => Stg/SIT/QA/Test => Production Env



reCaptcha => I'm not a robot => Token => Call your API and pass the token => From your server call reCaptcha validate API with secret key => If API returns success, then validation is successful  

Encryption Mechanisms : 
 Symmetric Encryption
 Asymetric Encryption


Interview Key Questions :

State vs Props?
Controlled vs uncontrolled components? (Less frequently asked)
Virtual DOM (Reconsiliation Process)
Updations of object (Reference Chaining)
Shallow copy vs deep copy
Rest and spread operator
Hoisting, Closures, async and await

Workflow of redux?
Code for small applications 
    e.g Auto suggest dropdown
        Write your debouncer
        Pass data from parent-child and vice versa
Authentication (JWT, Refresh Token, Passing token as auth)
Hooks (useEffect, useMemo, useCallback, useState) their lifecycle eqiuvalents
React portal
CSS Implementation (Advantages of SASS)
UI Libraries (Materi UI, Ant Design)